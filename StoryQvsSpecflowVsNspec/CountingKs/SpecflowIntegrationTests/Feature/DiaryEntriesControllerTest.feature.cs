// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecflowIntegrationTests.Feature
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DiariyEntries")]
    [NUnit.Framework.CategoryAttribute("TestSupport.Rest")]
    [NUnit.Framework.CategoryAttribute("TestSupport.Rest.Given")]
    public partial class DiariyEntriesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DiaryEntriesControllerTest.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DiariyEntries", "", ProgrammingLanguage.CSharp, new string[] {
                        "TestSupport.Rest",
                        "TestSupport.Rest.Given"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GET Response body -json file validation for DiaryEntriesController")]
        public virtual void GETResponseBody_JsonFileValidationForDiaryEntriesController()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GET Response body -json file validation for DiaryEntriesController", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "header",
                        "value"});
            table1.AddRow(new string[] {
                        "Accept",
                        "application/json"});
#line 9
testRunner.Given("the request has the following header values", ((string)(null)), table1, "Given ");
#line 12
testRunner.When("the request is sent as a GET to #DiaryEntriesUri#/1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
testRunner.Then("the server returns response code 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 14
testRunner.And("the response has the following body", @"{""url"":""http://localhost:8901/api/user/diaries/2015-05-07/entries/1"",""foodDescription"":""Turkey, All Classes, Meat&Skn&Giblets&Neck, Raw"",""measureDescription"":""1 Turkey"",""measureUrl"":""http://localhost:8901/api/nutrition/foods/912/measures/1595"",""quantity"":1.5}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("POST ResponseCodes- 201 Created for DiaryEntriesController")]
        public virtual void POSTResponseCodes_201CreatedForDiaryEntriesController()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("POST ResponseCodes- 201 Created for DiaryEntriesController", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 21
testRunner.Given("the request has the content type application/json and the following body", "{\r\n\"quantity\":105,\"measureUrl\":\"http://localhost:8901/api/nutrition/foods/7224/me" +
                    "asures/11433\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
testRunner.When("the request is sent as a POST to #DiaryEntriesUri#", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
testRunner.Then("the server returns response code 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("POST ResponseCode 400-Bad Request-  Duplicateerror message")]
        [NUnit.Framework.CategoryAttribute("myTag")]
        public virtual void POSTResponseCode400_BadRequest_DuplicateerrorMessage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("POST ResponseCode 400-Bad Request-  Duplicateerror message", new string[] {
                        "myTag"});
#line 32
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 33
testRunner.Given("the request has the content type application/json and the following body", "{\"quantity\":105,\"measureUrl\":\"http://localhost:8901/api/nutrition/foods/4280/meas" +
                    "ures/6924\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
testRunner.When("the request is sent as a POST to #DiaryEntriesUri#", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
testRunner.Then("the server returns response code 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
testRunner.And("the response has the following body", "{\"message\":\"Duplicate Measure not allowed.\"}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
